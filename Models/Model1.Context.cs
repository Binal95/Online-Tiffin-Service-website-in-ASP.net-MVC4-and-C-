//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Chatpata_dabbaEntities1 : DbContext
    {
        public Chatpata_dabbaEntities1()
            : base("name=Chatpata_dabbaEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AreaMaster> AreaMasters { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<DriverMaster> DriverMasters { get; set; }
        public virtual DbSet<FeedbackMaster> FeedbackMasters { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
        public virtual DbSet<MenuMaster> MenuMasters { get; set; }
        public virtual DbSet<OrderMaster> OrderMasters { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<RequestMaster> RequestMasters { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ItemMaster> ItemMasters { get; set; }
        public virtual DbSet<DailyCode> DailyCodes { get; set; }
        public virtual DbSet<DailyOrder> DailyOrders { get; set; }
        public virtual DbSet<Complain> Complains { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<GetMenuItems_Result> GetMenuItems(Nullable<int> menuID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuItems_Result>("GetMenuItems", menuIDParameter);
        }
    
        public virtual ObjectResult<ViewOrderDetails_Result> ViewOrderDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewOrderDetails_Result>("ViewOrderDetails");
        }
    
        public virtual ObjectResult<ViewOrderDetail_Result> ViewOrderDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewOrderDetail_Result>("ViewOrderDetail");
        }
    
        public virtual ObjectResult<ViewSampleRequest_Result> ViewSampleRequest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewSampleRequest_Result>("ViewSampleRequest");
        }
    
        public virtual ObjectResult<OrderDetails_Result> OrderDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDetails_Result>("OrderDetails");
        }
    
        public virtual ObjectResult<OrederHistory_Result> OrederHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrederHistory_Result>("OrederHistory");
        }
    
        public virtual ObjectResult<OrderList_Result> OrderList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderList_Result>("OrderList");
        }
    
        public virtual ObjectResult<DailyCodeRetrival_Result> DailyCodeRetrival()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DailyCodeRetrival_Result>("DailyCodeRetrival");
        }
    
        public virtual ObjectResult<DailyOrder_Result> DailyOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DailyOrder_Result>("DailyOrder");
        }
    
        public virtual ObjectResult<NewCodeRetrival_Result> NewCodeRetrival()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewCodeRetrival_Result>("NewCodeRetrival");
        }
    
        public virtual ObjectResult<DailyOrderData_Result> DailyOrderData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DailyOrderData_Result>("DailyOrderData");
        }
    
        public virtual ObjectResult<GetCodeData_Result> GetCodeData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCodeData_Result>("GetCodeData");
        }
    
        public virtual ObjectResult<DailyStatusChange_Result> DailyStatusChange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DailyStatusChange_Result>("DailyStatusChange");
        }
    }
}
